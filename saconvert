#!/usr/bin/env python
"""
Command line wrapper for sysstat TimeSeries class
"""
import argparse
import subprocess
import sys
import sysstat

parser = argparse.ArgumentParser(
    description="Convert sysstat collector (sadc) data to something else.")

parser.add_argument('infile', metavar='INPUT', help="binary SA data")
parser.add_argument('--interval', default=1, type=int, help="sampling interval")
parser.add_argument('--dump', action='store_true', help="dump JSON to stdout")
parser.add_argument('--outfile', help="name of file to write JSON to")
parser.add_argument('--utime', action='store_true', 
                    help='print unix time array')
parser.add_argument('--otime', action='store_true', 
                    help='print offset time array')

args = parser.parse_args()

try:
    data = sysstat.TimeSeries(args.infile)
    data.convert()
except OSError, e:
    print e.message
    sys.exit(2)
except subprocess.CalledProcessError, e:
    print 'Subprocess error: {}'.format(e.message)

print 'sysdata ver: {}'.format(data.version)
print 'host: {}\tdate: {}'.format(data.hostname, data.date)

if args.dump:
    data.dump()
if args.outfile:
    f = open(args.outfile, 'w')
    data.dump(f)
    f.close()
if args.utime:
    print data.unix_times
if args.otime:
    print data.offset_times
    
def dump_series(metrics):
    for metric in metrics:
        print '{}: '.format(metric), data.get_metrics(metric)
    
# simplest case for JSON metrics: single-level class with one node
dump_series(['queue/plist-sz', 'paging/fault'])

# next, single-level with multiple nodes
dump_series(['disk/dev253-0/wr_sec', 'cpu-load/3/idle'])

# two levels: class, subclass, multiple nodes
dump_series(['network/net-dev/br1/rxkB','network/net-edev/lo/rxdrop'])
   